generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exercises {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workout_id String   @db.Uuid
  name       String   @db.VarChar(50)
  workouts   workouts @relation(fields: [workout_id], references: [id], onDelete: Cascade)
  sets       sets[]

  @@index([workout_id], map: "exercises_workout_index")
}

model feedback {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @db.VarChar(255)
  email   String
  message String
}

model sets {
  id          String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exercise_id String                   @db.Uuid
  set_order   Int?
  weight      Int?
  duration    Unsupported("interval")?
  repetitions Int?
  exercises   exercises                @relation(fields: [exercise_id], references: [id], onDelete: Cascade)

  @@index([exercise_id], map: "sets_exercise_index")
}

model users {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String         @db.VarChar(255)
  birthday       DateTime       @db.Date
  username       String         @unique @db.VarChar(30)
  password       String
  email          String         @unique
  email_verified Boolean        @default(false)
  phone          String?        @unique @db.VarChar(22)
  phone_verified Boolean?       @default(false)
  workout_tags   workout_tags[]
  workouts       workouts[]

  @@index([email], map: "users_email_index")
}

model verification_token {
  identifier String   @id
  token      String   @unique
  expires    DateTime @db.Timestamp(6)
}

model workout_tags {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String                 @db.Uuid
  title                String                 @db.VarChar(30)
  color                String?                @default("#D6DBDF") @db.VarChar(7)
  workout_applied_tags workout_applied_tags[]
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([title], map: "tags_title_index")
  @@index([user_id], map: "tags_user_index")
}

model workouts {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String                 @db.Uuid
  title                String                 @db.VarChar(50)
  date                 DateTime               @db.Date
  description          String?
  image                String?
  exercises            exercises[]
  workout_applied_tags workout_applied_tags[]
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "workouts_user_index")
}

model workout_applied_tags {
  workout_id   String       @db.Uuid
  tag_id       String       @db.Uuid
  workout_tags workout_tags @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  workouts     workouts     @relation(fields: [workout_id], references: [id], onDelete: Cascade)

  @@id([workout_id, tag_id])
  @@index([tag_id], map: "workout_tags_tag_index")
  @@index([workout_id], map: "workout_tags_workout_index")
}
